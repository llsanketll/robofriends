{"version":3,"sources":["serviceWorker.js","components/ErrorBoundry.js","components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ErrorBoundry","hasError","this","props","children","React","Component","Scroll","style","position","top","zIndex","Card","name","email","id","className","src","alt","CardList","robots","map","e","key","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","fetch","respose","json","users","filterRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8fe2a6f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1> Ooops. That is Wrong</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{position:'sticky', top:'0', zIndex: 1}}>\r\n            { props.children }\r\n        </div>\r\n    ) \r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={ `https://robohash.org/${id}?200x200` } alt=\"pp\"/>\r\n            <div>\r\n                <h2> {name} </h2>\r\n                <p> {email} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className=\"cards-container\">\r\n            {\r\n                robots.map(e => {\r\n                    return <Card key={e.id}\r\n                        name={e.name}\r\n                        email={e.email}\r\n                        id={e.id}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input \r\n            type=\"search\" \r\n            placeholder=\"Search Robot\" \r\n            onChange={searchChange} \r\n\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport '../css/App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`https://jsonplaceholder.typicode.com/users`)\r\n            .then(respose => respose.json())\r\n            .then(users => this.setState({ robots: users }));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const filterRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        });\r\n        if (this.state.robots.length) {\r\n            return (\r\n                <div>\r\n                    <Scroll>\r\n                        <header>\r\n                            <h1> robofriends</h1>\r\n                            <SearchBox searchChange={this.onSearchChange} />\r\n                        </header>\r\n                    </Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filterRobots} />\r\n                    </ErrorBoundry>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <h1> Loading.. </h1>\r\n        }\r\n    }\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}